@using Finance.Web.Handlers
@inherits LayoutComponentBase
@inject IAppPreferencesHandler PreferenceHandler
@inject AppThemeHandler ThemeHandler


<MudLayout Class="full-height-layout">
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h6" Class="ml-2">FINANCE</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Inherit" OnClick="@OnAboutClicked" />
        <MudIconButton Icon="@(_isDarkMode? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" Color="Color.Inherit" OnClick="@ToggleTheme" />
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen"
               Variant="DrawerVariant.Persistent"
               ClipMode="DrawerClipMode.Always"
               Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6" Class="px-4 py-2">Menu</MudText>
        </MudDrawerHeader>
        <MudNavMenu Class="navmenu-styled pa-2">
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
                Home
            </MudNavLink>
            <MudNavLink Href="/categorias" Icon="@Icons.Material.Filled.ListAlt">
                Categories
            </MudNavLink>
            <MudNavLink Href="/transacoes" Icon="@Icons.Material.Filled.AccountBalanceWallet">
                Transactions
            </MudNavLink>
            <MudNavLink Href="/reports" Icon="@Icons.Material.Filled.BarChart">
                Reports
            </MudNavLink>
            <MudDivider Class="my-2" />
            <MudNavLink Href="/settings" Icon="@Icons.Material.Filled.Settings">
                Settings
            </MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent Class="main-content">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode;

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await PreferenceHandler.GetDarkModeAsync();
        ThemeHandler.OnThemeChanged += OnThemeChangedAsync;
    }

    private async Task ToggleTheme()
    {
        await ThemeHandler.ToggleTheme();
    }

    private Task OnThemeChangedAsync(bool isDark)
    {
        _isDarkMode = isDark;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnAboutClicked()
    {
        Console.WriteLine("About clicked");
    }

    public void Dispose()
    {
        ThemeHandler.OnThemeChanged -= OnThemeChangedAsync;
    }
}