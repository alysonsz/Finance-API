@page "/transacoes/criar"
@using Finance.Contracts.Requests.Categories
@using Finance.Contracts.Requests.Transactions
@using Finance.Domain.Models.DTOs
@using Finance.Web.Shared
@inject ITransactionHandler TransactionHandler
@inject ICategoryHandler CategoryHandler
@inject NavigationManager Navigation

<MudPaper Class="pa-6 mx-auto" MaxWidth="600px">
    <MudText Typo="Typo.h5" GutterBottom="true">Nova Transação</MudText>

    @if (_categories is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <TransactionForm Model="_request"
                         Categories="_categories"
                         ButtonText="Criar"
                         OnValidSubmit="HandleCreate"
                         OnCancel="GoBack" />
    }
</MudPaper>

@code {
    private UpdateTransactionRequest _request = new()
    {
        PaidOrReceivedAt = DateTime.Now
    };

    private List<CategoryDto>? _categories;

    protected override async Task OnInitializedAsync()
    {
        var result = await CategoryHandler.GetAllAsync(new GetAllCategoriesRequest { PageNumber = 1, PageSize = 100 });
        if (result.IsSuccess && result.Data != null)
        {
            _categories = result.Data;
        }
    }

    private async Task HandleCreate()
    {
        var createRequest = new CreateTransactionRequest
        {
            Title = _request.Title,
            Amount = _request.Amount,
            CategoryId = _request.CategoryId,
            PaidOrReceivedAt = _request.PaidOrReceivedAt,
            Type = _request.Type
        };

        var response = await TransactionHandler.CreateAsync(createRequest);
        if (response.IsSuccess)
            Navigation.NavigateTo("/transacoes?msg=Transação criada com sucesso!");
        else
            Console.WriteLine(response.Message);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/transacoes");
    }
}