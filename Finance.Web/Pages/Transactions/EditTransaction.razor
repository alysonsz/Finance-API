@page "/transacoes/editar/{Id:long}"
@using Finance.Contracts.Requests.Transactions
@using Finance.Contracts.Requests.Categories
@using Finance.Domain.Models.DTOs
@using System.Globalization
@inject ITransactionHandler TransactionHandler
@inject ICategoryHandler CategoryHandler
@inject NavigationManager Navigation

<h3>Editar Transação</h3>

<MudPaper Class="pa-6 mx-auto max-w-md">
    <MudText Typo="Typo.h5">Editar Transação</MudText>

    <MudTextField @bind-Value="transaction.Title" Label="Título" Variant="Variant.Filled" Required="true" />
    <MudTextField T="string"
                  Label="Valor"
                  @bind-Value="amountText"
                  Variant="Variant.Filled"
                  Required="true"
                  Immediate="true"
                  InputType="InputType.Text" />
    <MudSelect T="long" Label="Categoria" @bind-Value="transaction.CategoryId" Required="true" Variant="Variant.Filled">
        @foreach (var category in categories)
        {
            <MudSelectItem Value="category.Id">@category.Title</MudSelectItem>
        }
    </MudSelect>
    <MudDatePicker @bind-Date="transaction.PaidOrReceivedAt" Label="Data" Required="true" />

    <MudButton Color="Color.Primary" OnClick="HandleEdit" Variant="Variant.Filled" Class="mt-4" FullWidth>
        Salvar
    </MudButton>
</MudPaper>

@code {
    [Parameter] public long Id { get; set; }
    private UpdateTransactionRequest transaction = new();
    private List<CategoryDto> categories = new();

    protected override async Task OnInitializedAsync()
    {
        var get = await TransactionHandler.GetByIdAsync(new() { Id = Id });
        var cat = await CategoryHandler.GetAllAsync(new() { PageNumber = 1, PageSize = 100 });

        if (get.IsSuccess && get.Data is not null)
        {
            transaction = new()
            {
                Id = get.Data.Id,
                Title = get.Data.Title,
                Amount = Math.Abs(get.Data.Amount),
                CategoryId = get.Data.Category?.Id ?? 0,
                PaidOrReceivedAt = get.Data.PaidOrReceivedAt,
                Type = get.Data.Type
            };

            amountText = Math.Abs(get.Data.Amount).ToString("0.##", CultureInfo.GetCultureInfo("pt-BR"));
        }

        if (cat.IsSuccess && cat.Data is not null)
            categories = cat.Data;
    }

    private string amountText = string.Empty;

    private async Task HandleEdit()
    {
        if (!decimal.TryParse(amountText, out var parsedAmount))
        {
            Console.WriteLine("Valor inválido");
            return;
        }

        transaction.Amount = parsedAmount;

        var result = await TransactionHandler.UpdateAsync(transaction);
        if (result.IsSuccess)
            Navigation.NavigateTo("/transacoes");
        else
            Console.WriteLine(result.Message);
    }
}
