@page "/transacoes/editar/{Id:long}"
@using Finance.Contracts.Requests.Categories
@using Finance.Contracts.Requests.Transactions
@using Finance.Domain.Models.DTOs
@using Finance.Web.Shared
@inject ITransactionHandler TransactionHandler
@inject ICategoryHandler CategoryHandler
@inject NavigationManager Navigation

<MudPaper Class="pa-6 mx-auto" MaxWidth="600px">
    <MudText Typo="Typo.h5" GutterBottom="true">Editar Transação</MudText>

    @if (_transaction is null || _categories is null)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <TransactionForm Model="_transaction"
                         Categories="_categories"
                         ButtonText="Salvar"
                         OnValidSubmit="HandleEdit"
                         OnCancel="GoBack" />
    }
</MudPaper>

@code {
    [Parameter]
    public long Id { get; set; }

    private UpdateTransactionRequest? _transaction;
    private List<CategoryDto>? _categories;

    protected override async Task OnInitializedAsync()
    {
        var transactionTask = TransactionHandler.GetByIdAsync(new() { Id = Id });
        var categoryTask = CategoryHandler.GetAllAsync(new() { PageNumber = 1, PageSize = 100 });

        await Task.WhenAll(transactionTask, categoryTask);

        var transactionResult = await transactionTask;
        var categoryResult = await categoryTask;

        if (transactionResult.IsSuccess && transactionResult.Data is not null)
        {
            _transaction = new()
            {
                Id = transactionResult.Data.Id,
                Title = transactionResult.Data.Title,
                Amount = transactionResult.Data.Amount,
                CategoryId = transactionResult.Data.Category?.Id ?? 0,
                PaidOrReceivedAt = transactionResult.Data.PaidOrReceivedAt,
                Type = transactionResult.Data.Type
            };
        }

        if (categoryResult.IsSuccess && categoryResult.Data is not null)
        {
            _categories = categoryResult.Data;
        }
    }

    private async Task HandleEdit()
    {
        if (_transaction is null) return;

        var result = await TransactionHandler.UpdateAsync(_transaction);
        if (result.IsSuccess)
            Navigation.NavigateTo("/transacoes?msg=Transação atualizada com sucesso!");
        else
            Console.WriteLine(result.Message);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/transacoes");
    }
}